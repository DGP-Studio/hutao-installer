/* automatically generated by rust-bindgen 0.71.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const HDIFFPATCH_VERSION_MAJOR: u32 = 4;
pub const HDIFFPATCH_VERSION_MINOR: u32 = 8;
pub const HDIFFPATCH_VERSION_RELEASE: u32 = 0;
pub const HDIFFPATCH_VERSION_NUMBER: u32 = 4008000;
pub const hpatch_FALSE: u32 = 0;
pub const PRIu64: &[u8; 5] = b"I64u\0";
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _HPATCH_IS_USED_errno: u32 = 1;
pub const _hpatch_import_system_tag: &[u8; 23] = b"call import system api\0";
pub const hpatch_kStreamCacheSize: u32 = 4096;
pub const hpatch_kFileIOBufBetterSize: u32 = 65536;
pub const hpatch_kMaxPluginTypeLength: u32 = 259;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
unsafe extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
unsafe extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
unsafe extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t, _Line: ::std::os::raw::c_uint);
}
pub type hpatch_int = ::std::os::raw::c_int;
pub type hpatch_uint = ::std::os::raw::c_uint;
pub type hpatch_size_t = usize;
pub type hpatch_uint32_t = ::std::os::raw::c_uint;
pub type hpatch_uint64_t = ::std::os::raw::c_ulonglong;
pub type hpatch_StreamPos_t = hpatch_uint64_t;
pub type hpatch_BOOL = ::std::os::raw::c_int;
pub type hpatch_byte = ::std::os::raw::c_uchar;
pub type hpatch_FileError_t = hpatch_BOOL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 8usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 8usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
unsafe extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
unsafe extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
unsafe extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
unsafe extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type hpatch_TStreamInputHandle = *mut ::std::os::raw::c_void;
pub type hpatch_TStreamOutputHandle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TStreamInput {
    pub streamImport: *mut ::std::os::raw::c_void,
    pub streamSize: hpatch_StreamPos_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const hpatch_TStreamInput,
            readFromPos: hpatch_StreamPos_t,
            out_data: *mut ::std::os::raw::c_uchar,
            out_data_end: *mut ::std::os::raw::c_uchar,
        ) -> hpatch_BOOL,
    >,
    pub _private_reserved: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TStreamInput"][::std::mem::size_of::<hpatch_TStreamInput>() - 32usize];
    ["Alignment of hpatch_TStreamInput"][::std::mem::align_of::<hpatch_TStreamInput>() - 8usize];
    ["Offset of field: hpatch_TStreamInput::streamImport"]
        [::std::mem::offset_of!(hpatch_TStreamInput, streamImport) - 0usize];
    ["Offset of field: hpatch_TStreamInput::streamSize"]
        [::std::mem::offset_of!(hpatch_TStreamInput, streamSize) - 8usize];
    ["Offset of field: hpatch_TStreamInput::read"]
        [::std::mem::offset_of!(hpatch_TStreamInput, read) - 16usize];
    ["Offset of field: hpatch_TStreamInput::_private_reserved"]
        [::std::mem::offset_of!(hpatch_TStreamInput, _private_reserved) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TStreamOutput {
    pub streamImport: *mut ::std::os::raw::c_void,
    pub streamSize: hpatch_StreamPos_t,
    pub read_writed: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const hpatch_TStreamOutput,
            readFromPos: hpatch_StreamPos_t,
            out_data: *mut ::std::os::raw::c_uchar,
            out_data_end: *mut ::std::os::raw::c_uchar,
        ) -> hpatch_BOOL,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const hpatch_TStreamOutput,
            writeToPos: hpatch_StreamPos_t,
            data: *const ::std::os::raw::c_uchar,
            data_end: *const ::std::os::raw::c_uchar,
        ) -> hpatch_BOOL,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TStreamOutput"][::std::mem::size_of::<hpatch_TStreamOutput>() - 32usize];
    ["Alignment of hpatch_TStreamOutput"][::std::mem::align_of::<hpatch_TStreamOutput>() - 8usize];
    ["Offset of field: hpatch_TStreamOutput::streamImport"]
        [::std::mem::offset_of!(hpatch_TStreamOutput, streamImport) - 0usize];
    ["Offset of field: hpatch_TStreamOutput::streamSize"]
        [::std::mem::offset_of!(hpatch_TStreamOutput, streamSize) - 8usize];
    ["Offset of field: hpatch_TStreamOutput::read_writed"]
        [::std::mem::offset_of!(hpatch_TStreamOutput, read_writed) - 16usize];
    ["Offset of field: hpatch_TStreamOutput::write"]
        [::std::mem::offset_of!(hpatch_TStreamOutput, write) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_compressedDiffInfo {
    pub newDataSize: hpatch_StreamPos_t,
    pub oldDataSize: hpatch_StreamPos_t,
    pub compressedCount: hpatch_uint,
    pub compressType: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_compressedDiffInfo"]
        [::std::mem::size_of::<hpatch_compressedDiffInfo>() - 280usize];
    ["Alignment of hpatch_compressedDiffInfo"]
        [::std::mem::align_of::<hpatch_compressedDiffInfo>() - 8usize];
    ["Offset of field: hpatch_compressedDiffInfo::newDataSize"]
        [::std::mem::offset_of!(hpatch_compressedDiffInfo, newDataSize) - 0usize];
    ["Offset of field: hpatch_compressedDiffInfo::oldDataSize"]
        [::std::mem::offset_of!(hpatch_compressedDiffInfo, oldDataSize) - 8usize];
    ["Offset of field: hpatch_compressedDiffInfo::compressedCount"]
        [::std::mem::offset_of!(hpatch_compressedDiffInfo, compressedCount) - 16usize];
    ["Offset of field: hpatch_compressedDiffInfo::compressType"]
        [::std::mem::offset_of!(hpatch_compressedDiffInfo, compressType) - 20usize];
};
pub type hpatch_decompressHandle = *mut ::std::os::raw::c_void;
pub const hpatch_dec_error_t_hpatch_dec_ok: hpatch_dec_error_t = 0;
pub const hpatch_dec_error_t_hpatch_dec_mem_error: hpatch_dec_error_t = 1;
pub const hpatch_dec_error_t_hpatch_dec_open_error: hpatch_dec_error_t = 2;
pub const hpatch_dec_error_t_hpatch_dec_error: hpatch_dec_error_t = 3;
pub const hpatch_dec_error_t_hpatch_dec_close_error: hpatch_dec_error_t = 4;
pub type hpatch_dec_error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TDecompress {
    pub is_can_open: ::std::option::Option<
        unsafe extern "C" fn(compresseType: *const ::std::os::raw::c_char) -> hpatch_BOOL,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            decompressPlugin: *mut hpatch_TDecompress,
            dataSize: hpatch_StreamPos_t,
            codeStream: *const hpatch_TStreamInput,
            code_begin: hpatch_StreamPos_t,
            code_end: hpatch_StreamPos_t,
        ) -> hpatch_decompressHandle,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            decompressPlugin: *mut hpatch_TDecompress,
            decompressHandle: hpatch_decompressHandle,
        ) -> hpatch_BOOL,
    >,
    pub decompress_part: ::std::option::Option<
        unsafe extern "C" fn(
            decompressHandle: hpatch_decompressHandle,
            out_part_data: *mut ::std::os::raw::c_uchar,
            out_part_data_end: *mut ::std::os::raw::c_uchar,
        ) -> hpatch_BOOL,
    >,
    pub reset_code: ::std::option::Option<
        unsafe extern "C" fn(
            decompressHandle: hpatch_decompressHandle,
            dataSize: hpatch_StreamPos_t,
            codeStream: *const hpatch_TStreamInput,
            code_begin: hpatch_StreamPos_t,
            code_end: hpatch_StreamPos_t,
        ) -> hpatch_BOOL,
    >,
    pub decError: hpatch_dec_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TDecompress"][::std::mem::size_of::<hpatch_TDecompress>() - 48usize];
    ["Alignment of hpatch_TDecompress"][::std::mem::align_of::<hpatch_TDecompress>() - 8usize];
    ["Offset of field: hpatch_TDecompress::is_can_open"]
        [::std::mem::offset_of!(hpatch_TDecompress, is_can_open) - 0usize];
    ["Offset of field: hpatch_TDecompress::open"]
        [::std::mem::offset_of!(hpatch_TDecompress, open) - 8usize];
    ["Offset of field: hpatch_TDecompress::close"]
        [::std::mem::offset_of!(hpatch_TDecompress, close) - 16usize];
    ["Offset of field: hpatch_TDecompress::decompress_part"]
        [::std::mem::offset_of!(hpatch_TDecompress, decompress_part) - 24usize];
    ["Offset of field: hpatch_TDecompress::reset_code"]
        [::std::mem::offset_of!(hpatch_TDecompress, reset_code) - 32usize];
    ["Offset of field: hpatch_TDecompress::decError"]
        [::std::mem::offset_of!(hpatch_TDecompress, decError) - 40usize];
};
unsafe extern "C" {
    pub fn mem_as_hStreamInput(
        out_stream: *mut hpatch_TStreamInput,
        mem: *const ::std::os::raw::c_uchar,
        mem_end: *const ::std::os::raw::c_uchar,
    ) -> *const hpatch_TStreamInput;
}
unsafe extern "C" {
    pub fn mem_as_hStreamOutput(
        out_stream: *mut hpatch_TStreamOutput,
        mem: *mut ::std::os::raw::c_uchar,
        mem_end: *mut ::std::os::raw::c_uchar,
    ) -> *const hpatch_TStreamOutput;
}
unsafe extern "C" {
    pub fn hpatch_deccompress_mem(
        decompressPlugin: *mut hpatch_TDecompress,
        code: *const ::std::os::raw::c_uchar,
        code_end: *const ::std::os::raw::c_uchar,
        out_data: *mut ::std::os::raw::c_uchar,
        out_data_end: *mut ::std::os::raw::c_uchar,
    ) -> hpatch_BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TStreamInputClip {
    pub base: hpatch_TStreamInput,
    pub srcStream: *const hpatch_TStreamInput,
    pub clipBeginPos: hpatch_StreamPos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TStreamInputClip"][::std::mem::size_of::<TStreamInputClip>() - 48usize];
    ["Alignment of TStreamInputClip"][::std::mem::align_of::<TStreamInputClip>() - 8usize];
    ["Offset of field: TStreamInputClip::base"]
        [::std::mem::offset_of!(TStreamInputClip, base) - 0usize];
    ["Offset of field: TStreamInputClip::srcStream"]
        [::std::mem::offset_of!(TStreamInputClip, srcStream) - 32usize];
    ["Offset of field: TStreamInputClip::clipBeginPos"]
        [::std::mem::offset_of!(TStreamInputClip, clipBeginPos) - 40usize];
};
unsafe extern "C" {
    pub fn TStreamInputClip_init(
        self_: *mut TStreamInputClip,
        srcStream: *const hpatch_TStreamInput,
        clipBeginPos: hpatch_StreamPos_t,
        clipEndPos: hpatch_StreamPos_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TStreamOutputClip {
    pub base: hpatch_TStreamOutput,
    pub srcStream: *const hpatch_TStreamOutput,
    pub clipBeginPos: hpatch_StreamPos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TStreamOutputClip"][::std::mem::size_of::<TStreamOutputClip>() - 48usize];
    ["Alignment of TStreamOutputClip"][::std::mem::align_of::<TStreamOutputClip>() - 8usize];
    ["Offset of field: TStreamOutputClip::base"]
        [::std::mem::offset_of!(TStreamOutputClip, base) - 0usize];
    ["Offset of field: TStreamOutputClip::srcStream"]
        [::std::mem::offset_of!(TStreamOutputClip, srcStream) - 32usize];
    ["Offset of field: TStreamOutputClip::clipBeginPos"]
        [::std::mem::offset_of!(TStreamOutputClip, clipBeginPos) - 40usize];
};
unsafe extern "C" {
    pub fn TStreamOutputClip_init(
        self_: *mut TStreamOutputClip,
        srcStream: *const hpatch_TStreamOutput,
        clipBeginPos: hpatch_StreamPos_t,
        clipEndPos: hpatch_StreamPos_t,
    );
}
unsafe extern "C" {
    pub fn hpatch_packUIntWithTag(
        out_code: *mut *mut ::std::os::raw::c_uchar,
        out_code_end: *mut ::std::os::raw::c_uchar,
        uValue: hpatch_StreamPos_t,
        highTag: hpatch_uint,
        kTagBit: hpatch_uint,
    ) -> hpatch_BOOL;
}
unsafe extern "C" {
    pub fn hpatch_packUIntWithTag_size(
        uValue: hpatch_StreamPos_t,
        kTagBit: hpatch_uint,
    ) -> hpatch_uint;
}
unsafe extern "C" {
    pub fn hpatch_unpackUIntWithTag(
        src_code: *mut *const ::std::os::raw::c_uchar,
        src_code_end: *const ::std::os::raw::c_uchar,
        result: *mut hpatch_StreamPos_t,
        kTagBit: hpatch_uint,
    ) -> hpatch_BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TCover {
    pub oldPos: hpatch_StreamPos_t,
    pub newPos: hpatch_StreamPos_t,
    pub length: hpatch_StreamPos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TCover"][::std::mem::size_of::<hpatch_TCover>() - 24usize];
    ["Alignment of hpatch_TCover"][::std::mem::align_of::<hpatch_TCover>() - 8usize];
    ["Offset of field: hpatch_TCover::oldPos"]
        [::std::mem::offset_of!(hpatch_TCover, oldPos) - 0usize];
    ["Offset of field: hpatch_TCover::newPos"]
        [::std::mem::offset_of!(hpatch_TCover, newPos) - 8usize];
    ["Offset of field: hpatch_TCover::length"]
        [::std::mem::offset_of!(hpatch_TCover, length) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TCover32 {
    pub oldPos: hpatch_uint32_t,
    pub newPos: hpatch_uint32_t,
    pub length: hpatch_uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TCover32"][::std::mem::size_of::<hpatch_TCover32>() - 12usize];
    ["Alignment of hpatch_TCover32"][::std::mem::align_of::<hpatch_TCover32>() - 4usize];
    ["Offset of field: hpatch_TCover32::oldPos"]
        [::std::mem::offset_of!(hpatch_TCover32, oldPos) - 0usize];
    ["Offset of field: hpatch_TCover32::newPos"]
        [::std::mem::offset_of!(hpatch_TCover32, newPos) - 4usize];
    ["Offset of field: hpatch_TCover32::length"]
        [::std::mem::offset_of!(hpatch_TCover32, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TCover_sz {
    pub oldPos: usize,
    pub newPos: usize,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TCover_sz"][::std::mem::size_of::<hpatch_TCover_sz>() - 24usize];
    ["Alignment of hpatch_TCover_sz"][::std::mem::align_of::<hpatch_TCover_sz>() - 8usize];
    ["Offset of field: hpatch_TCover_sz::oldPos"]
        [::std::mem::offset_of!(hpatch_TCover_sz, oldPos) - 0usize];
    ["Offset of field: hpatch_TCover_sz::newPos"]
        [::std::mem::offset_of!(hpatch_TCover_sz, newPos) - 8usize];
    ["Offset of field: hpatch_TCover_sz::length"]
        [::std::mem::offset_of!(hpatch_TCover_sz, length) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TCovers {
    pub leave_cover_count: ::std::option::Option<
        unsafe extern "C" fn(covers: *const hpatch_TCovers) -> hpatch_StreamPos_t,
    >,
    pub read_cover: ::std::option::Option<
        unsafe extern "C" fn(
            covers: *mut hpatch_TCovers,
            out_cover: *mut hpatch_TCover,
        ) -> hpatch_BOOL,
    >,
    pub is_finish:
        ::std::option::Option<unsafe extern "C" fn(covers: *const hpatch_TCovers) -> hpatch_BOOL>,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(covers: *mut hpatch_TCovers) -> hpatch_BOOL>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TCovers"][::std::mem::size_of::<hpatch_TCovers>() - 32usize];
    ["Alignment of hpatch_TCovers"][::std::mem::align_of::<hpatch_TCovers>() - 8usize];
    ["Offset of field: hpatch_TCovers::leave_cover_count"]
        [::std::mem::offset_of!(hpatch_TCovers, leave_cover_count) - 0usize];
    ["Offset of field: hpatch_TCovers::read_cover"]
        [::std::mem::offset_of!(hpatch_TCovers, read_cover) - 8usize];
    ["Offset of field: hpatch_TCovers::is_finish"]
        [::std::mem::offset_of!(hpatch_TCovers, is_finish) - 16usize];
    ["Offset of field: hpatch_TCovers::close"]
        [::std::mem::offset_of!(hpatch_TCovers, close) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TOutputCovers {
    pub push_cover: ::std::option::Option<
        unsafe extern "C" fn(
            out_covers: *mut hpatch_TOutputCovers,
            cover: *const hpatch_TCover,
        ) -> hpatch_BOOL,
    >,
    pub collate_covers:
        ::std::option::Option<unsafe extern "C" fn(out_covers: *mut hpatch_TOutputCovers)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TOutputCovers"][::std::mem::size_of::<hpatch_TOutputCovers>() - 16usize];
    ["Alignment of hpatch_TOutputCovers"][::std::mem::align_of::<hpatch_TOutputCovers>() - 8usize];
    ["Offset of field: hpatch_TOutputCovers::push_cover"]
        [::std::mem::offset_of!(hpatch_TOutputCovers, push_cover) - 0usize];
    ["Offset of field: hpatch_TOutputCovers::collate_covers"]
        [::std::mem::offset_of!(hpatch_TOutputCovers, collate_covers) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_singleCompressedDiffInfo {
    pub newDataSize: hpatch_StreamPos_t,
    pub oldDataSize: hpatch_StreamPos_t,
    pub uncompressedSize: hpatch_StreamPos_t,
    pub compressedSize: hpatch_StreamPos_t,
    pub diffDataPos: hpatch_StreamPos_t,
    pub coverCount: hpatch_StreamPos_t,
    pub stepMemSize: hpatch_StreamPos_t,
    pub compressType: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_singleCompressedDiffInfo"]
        [::std::mem::size_of::<hpatch_singleCompressedDiffInfo>() - 320usize];
    ["Alignment of hpatch_singleCompressedDiffInfo"]
        [::std::mem::align_of::<hpatch_singleCompressedDiffInfo>() - 8usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::newDataSize"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, newDataSize) - 0usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::oldDataSize"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, oldDataSize) - 8usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::uncompressedSize"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, uncompressedSize) - 16usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::compressedSize"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, compressedSize) - 24usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::diffDataPos"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, diffDataPos) - 32usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::coverCount"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, coverCount) - 40usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::stepMemSize"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, stepMemSize) - 48usize];
    ["Offset of field: hpatch_singleCompressedDiffInfo::compressType"]
        [::std::mem::offset_of!(hpatch_singleCompressedDiffInfo, compressType) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspatch_listener_t {
    pub import: *mut ::std::os::raw::c_void,
    pub onDiffInfo: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut sspatch_listener_t,
            info: *const hpatch_singleCompressedDiffInfo,
            out_decompressPlugin: *mut *mut hpatch_TDecompress,
            out_temp_cache: *mut *mut ::std::os::raw::c_uchar,
            out_temp_cacheEnd: *mut *mut ::std::os::raw::c_uchar,
        ) -> hpatch_BOOL,
    >,
    pub onPatchFinish: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut sspatch_listener_t,
            temp_cache: *mut ::std::os::raw::c_uchar,
            temp_cacheEnd: *mut ::std::os::raw::c_uchar,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspatch_listener_t"][::std::mem::size_of::<sspatch_listener_t>() - 24usize];
    ["Alignment of sspatch_listener_t"][::std::mem::align_of::<sspatch_listener_t>() - 8usize];
    ["Offset of field: sspatch_listener_t::import"]
        [::std::mem::offset_of!(sspatch_listener_t, import) - 0usize];
    ["Offset of field: sspatch_listener_t::onDiffInfo"]
        [::std::mem::offset_of!(sspatch_listener_t, onDiffInfo) - 8usize];
    ["Offset of field: sspatch_listener_t::onPatchFinish"]
        [::std::mem::offset_of!(sspatch_listener_t, onPatchFinish) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hpatch_TUncompresser_t {
    pub base: hpatch_TStreamInput,
    pub _decompressPlugin: *mut hpatch_TDecompress,
    pub _decompressHandle: hpatch_decompressHandle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hpatch_TUncompresser_t"][::std::mem::size_of::<hpatch_TUncompresser_t>() - 48usize];
    ["Alignment of hpatch_TUncompresser_t"]
        [::std::mem::align_of::<hpatch_TUncompresser_t>() - 8usize];
    ["Offset of field: hpatch_TUncompresser_t::base"]
        [::std::mem::offset_of!(hpatch_TUncompresser_t, base) - 0usize];
    ["Offset of field: hpatch_TUncompresser_t::_decompressPlugin"]
        [::std::mem::offset_of!(hpatch_TUncompresser_t, _decompressPlugin) - 32usize];
    ["Offset of field: hpatch_TUncompresser_t::_decompressHandle"]
        [::std::mem::offset_of!(hpatch_TUncompresser_t, _decompressHandle) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspatch_coversListener_t {
    pub import: *mut ::std::os::raw::c_void,
    pub onStepCoversReset: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut sspatch_coversListener_t,
            leaveCoverCount: hpatch_StreamPos_t,
        ),
    >,
    pub onStepCovers: ::std::option::Option<
        unsafe extern "C" fn(
            listener: *mut sspatch_coversListener_t,
            covers_cache: *const ::std::os::raw::c_uchar,
            covers_cacheEnd: *const ::std::os::raw::c_uchar,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspatch_coversListener_t"]
        [::std::mem::size_of::<sspatch_coversListener_t>() - 24usize];
    ["Alignment of sspatch_coversListener_t"]
        [::std::mem::align_of::<sspatch_coversListener_t>() - 8usize];
    ["Offset of field: sspatch_coversListener_t::import"]
        [::std::mem::offset_of!(sspatch_coversListener_t, import) - 0usize];
    ["Offset of field: sspatch_coversListener_t::onStepCoversReset"]
        [::std::mem::offset_of!(sspatch_coversListener_t, onStepCoversReset) - 8usize];
    ["Offset of field: sspatch_coversListener_t::onStepCovers"]
        [::std::mem::offset_of!(sspatch_coversListener_t, onStepCovers) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspatch_covers_t {
    pub covers_cache: *const ::std::os::raw::c_uchar,
    pub covers_cacheEnd: *const ::std::os::raw::c_uchar,
    pub lastOldEnd: hpatch_StreamPos_t,
    pub lastNewEnd: hpatch_StreamPos_t,
    pub cover: hpatch_TCover,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspatch_covers_t"][::std::mem::size_of::<sspatch_covers_t>() - 56usize];
    ["Alignment of sspatch_covers_t"][::std::mem::align_of::<sspatch_covers_t>() - 8usize];
    ["Offset of field: sspatch_covers_t::covers_cache"]
        [::std::mem::offset_of!(sspatch_covers_t, covers_cache) - 0usize];
    ["Offset of field: sspatch_covers_t::covers_cacheEnd"]
        [::std::mem::offset_of!(sspatch_covers_t, covers_cacheEnd) - 8usize];
    ["Offset of field: sspatch_covers_t::lastOldEnd"]
        [::std::mem::offset_of!(sspatch_covers_t, lastOldEnd) - 16usize];
    ["Offset of field: sspatch_covers_t::lastNewEnd"]
        [::std::mem::offset_of!(sspatch_covers_t, lastNewEnd) - 24usize];
    ["Offset of field: sspatch_covers_t::cover"]
        [::std::mem::offset_of!(sspatch_covers_t, cover) - 32usize];
};
unsafe extern "C" {
    pub fn sspatch_covers_nextCover(self_: *mut sspatch_covers_t) -> hpatch_BOOL;
}
pub type hdiff_TStreamOutput = hpatch_TStreamOutput;
pub type hdiff_TStreamInput = hpatch_TStreamInput;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdiff_TCompress {
    pub compressType:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub maxCompressedSize: ::std::option::Option<
        unsafe extern "C" fn(dataSize: hpatch_StreamPos_t) -> hpatch_StreamPos_t,
    >,
    pub setParallelThreadNumber: ::std::option::Option<
        unsafe extern "C" fn(
            compressPlugin: *mut hdiff_TCompress,
            threadNum: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub compress: ::std::option::Option<
        unsafe extern "C" fn(
            compressPlugin: *const hdiff_TCompress,
            out_code: *const hpatch_TStreamOutput,
            in_data: *const hpatch_TStreamInput,
        ) -> hpatch_StreamPos_t,
    >,
    pub compressTypeForDisplay:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdiff_TCompress"][::std::mem::size_of::<hdiff_TCompress>() - 40usize];
    ["Alignment of hdiff_TCompress"][::std::mem::align_of::<hdiff_TCompress>() - 8usize];
    ["Offset of field: hdiff_TCompress::compressType"]
        [::std::mem::offset_of!(hdiff_TCompress, compressType) - 0usize];
    ["Offset of field: hdiff_TCompress::maxCompressedSize"]
        [::std::mem::offset_of!(hdiff_TCompress, maxCompressedSize) - 8usize];
    ["Offset of field: hdiff_TCompress::setParallelThreadNumber"]
        [::std::mem::offset_of!(hdiff_TCompress, setParallelThreadNumber) - 16usize];
    ["Offset of field: hdiff_TCompress::compress"]
        [::std::mem::offset_of!(hdiff_TCompress, compress) - 24usize];
    ["Offset of field: hdiff_TCompress::compressTypeForDisplay"]
        [::std::mem::offset_of!(hdiff_TCompress, compressTypeForDisplay) - 32usize];
};
unsafe extern "C" {
    pub fn create_single_compressed_diff(
        newData: *const ::std::os::raw::c_uchar,
        newData_end: *const ::std::os::raw::c_uchar,
        oldData: *const ::std::os::raw::c_uchar,
        oldData_end: *const ::std::os::raw::c_uchar,
        out_diff: *const hpatch_TStreamOutput,
        compressPlugin: *const hdiff_TCompress,
        kMinSingleMatchScore: ::std::os::raw::c_int,
        patchStepMemSize: usize,
        isUseBigCacheMatch: bool,
        listener: *mut ::std::os::raw::c_void,
        threadNum: usize,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
